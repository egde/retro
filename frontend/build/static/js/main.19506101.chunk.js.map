{"version":3,"sources":["actions/BoardActionTypes.js","Dispatcher.js","actions/BoardActions.js","actions/BoardStore.js","pages/BoardOverview.jsx","entities/Issue.js","components/Issue.jsx","actions/IssueActionTypes.js","actions/IssueActions.js","actions/IssueStore.js","pages/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["ActionTypes","LOAD_BOARD","LOAD_BOARDS","ADD_BOARD","EventTypes","Dispatcher","Actions","loadBoards","ownerId","dispatcher","dispatch","type","BoardActionTypes","loadBoard","boardId","addBoard","board","boardStore","BoardStore","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","boards","_this2","axios","get","then","res","data","emit","catch","err","console","log","_this3","_this4","post","action","EventEmitter","LOAD_BOARDS_COMPLETED","register","handleActions","bind","BoardOverview","state","isShowAddBoard","assertThisInitialized","addNewBoard","handleChange","on","removeListener","BoardActions","setState","getBoards","b","states","event","target","value","checked","name","react_default","a","createElement","id","className","onClick","entries","map","key","Link","to","title","onChange","stateInd","aria-label","Component","IssueEntity","v4","dbId","text","Issue","onMouseOver","mode","onMouseLeave","deleteEntry","onFocusOut","onDelete","issueValue","issue","stateValue","e","draggable","onBlur","ind","LOAD_ISSUES","SAVE_ISSUE","loadIssues","IssueActionTypes","saveIssue","issueStore","IssueStore","issues","params","SAVE_ISSUE_COMPLETED","Board","addIssue","setBoard","setIssues","saveEntry","BoardEventTypes","IssueEventTypes","match","IssueActions","getBoard","getIssues","find","findIndex","splice","push","concat","filter","components_Issue","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19506101.chunk.js","sourcesContent":["export const ActionTypes = {\n    LOAD_BOARD: 'LOAD_BOARD',\n    LOAD_BOARDS: 'LOAD_BOARDS',\n    ADD_BOARD: 'ADD_BOARD'\n}\n\nexport const EventTypes = {\n    LOAD_BOARD_COMPLETED: 'LOAD_BOARD_COMPLETED',\n    LOAD_BOARDS_COMPLETED: 'LOAD_BOARDS_COMPLETED',\n}\n\nexport default ActionTypes;","import {Dispatcher} from 'flux';\n\nexport default new Dispatcher();","import BoardActionTypes from './BoardActionTypes';\nimport dispatcher from '../Dispatcher';\n\nconst Actions = {\n    loadBoards(ownerId) {\n        dispatcher.dispatch({\n            type: BoardActionTypes.LOAD_BOARDS,\n            ownerId\n        });\n    },\n    loadBoard(boardId) {\n        dispatcher.dispatch({\n            type: BoardActionTypes.LOAD_BOARD,\n            boardId\n        })\n    },\n    addBoard(board) {\n        dispatcher.dispatch({\n            type: BoardActionTypes.ADD_BOARD,\n            board\n        })\n    }\n}\n\nexport default Actions;","import {EventEmitter} from 'events';\nimport {ActionTypes, EventTypes}  from './BoardActionTypes';\nimport dispatcher from '../Dispatcher';\nimport axios from 'axios';\n\nclass BoardStore extends EventEmitter{\n    constructor(props) {\n        super(props);\n        this.boards = [];\n        this.board = {};\n    }\n\n    getBoards() {\n        return this.boards;\n    }\n    \n    getBoard() {\n        return this.board;\n    }\n    \n    loadBoards(ownerId) {\n        axios.get('/api/boards')\n            .then((res) => {\n                    this.boards = res.data;\n                    this.emit(EventTypes.LOAD_BOARDS_COMPLETED);\n                })\n            .catch((err) => {\n                console.log(err)\n            });\n    }\n    \n    loadBoard(boardId) {\n        axios.get('/api/boards/'+boardId)\n            .then((res) => {\n                this.board = res.data;\n                this.emit(EventTypes.LOAD_BOARD_COMPLETED);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n    \n    addBoard(board) {\n        axios.post('/api/boards',board)\n            .then((res) => {\n                this.loadBoards(board.ownerId);        \n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n\n    handleActions(action) {\n        switch(action.type) {\n            case ActionTypes.LOAD_BOARDS:\n                if (!action.ownerId) {\n                    this.emit(EventTypes.LOAD_BOARDS_COMPLETED);\n                    break;\n                }\n                this.loadBoards(action.ownerId);\n                break;\n            case ActionTypes.LOAD_BOARD:\n                if (!action.boardId) {\n                    this.emit(EventTypes.LOAD_BOARD_COMPLETED);\n                    break;\n                }\n                this.loadBoard(action.boardId);\n                break;\n            case ActionTypes.ADD_BOARD:\n                if(!action.board) {\n                    this.emit(EventEmitter.LOAD_BOARDS_COMPLETED);\n                    break;\n                }\n                this.addBoard(action.board);\n                break;\n            default:\n                return;\n        }\n    }\n}\n\nconst boardStore = new BoardStore();\ndispatcher.register( boardStore.handleActions.bind(boardStore));\n\nexport default boardStore;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport BoardActions from '../actions/BoardActions';\nimport BoardStore from '../actions/BoardStore';\nimport { EventTypes } from '../actions/BoardActionTypes';\n\nclass BoardOverview extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            boards : [\n            ],\n            board : {},\n            ownerId : '123',\n            isShowAddBoard:false\n        };\n        \n        this.addBoard = this.addBoard.bind(this);\n        this.addNewBoard = this.addNewBoard.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.loadBoards = this.loadBoards.bind(this);\n    }\n    \n    componentWillMount() {\n        BoardStore.on(EventTypes.LOAD_BOARDS_COMPLETED, this.loadBoards);\n    }\n\n    componentWillUnmount() {\n        BoardStore.removeListener(EventTypes.LOAD_BOARDS_COMPLETED, this.loadBoards);\n    }\n\n    componentDidMount() {\n        BoardActions.loadBoards('xx');\n    }\n    \n    loadBoards() {\n        this.setState({boards : BoardStore.getBoards()});\n    }\n    \n    addBoard() {\n        var b = {};\n        b.title = \"\";\n        b.ownerId = this.state.ownerId;\n        b.states = ['Smile', 'Frown', 'Improve'];\n        \n        this.setState({\n            board: b,\n            isShowAddBoard: true\n        });\n    }\n    \n    handleChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        \n        var board = this.state.board;\n        if (name === 'stateInd') {\n            switch (value) {\n                case '1':\n                    board.states = ['GOOD', 'BAD', 'DISCONTINUE'];\n                    break;\n                default:\n                    board.states = ['Smile', 'Frown', 'Improve'];\n                    break;\n            }        \n        }\n        board[name] = value;\n    \n        this.setState({board : board});\n    }\n    \n    addNewBoard() {\n        BoardActions.addBoard(this.state.board);\n        this.setState({isShowAddBoard: false});\n    }\n    \n    render() {\n        return (\n            <section id=\"BoardOverview\" className=\"section\">\n                <div className=\"container\">\n                    <h1 className=\"title\">Boards Overview</h1>\n                    <button className=\"button is-primary\" onClick={this.addBoard}>Add</button>\n                    <div className=\"container\">\n                        <div className=\"tile is-ancestor is-vertical\">\n                        {\n                            Object.entries(this.state.boards).map((board) => {\n                                return (\n                                    <div key={board[1].id} className=\"tile is-parent\">\n                                         <article className=\"tile is-child notification is-info\">\n                                            <Link to={\"/board/\"+board[1].id}>{board[1].title}</Link>\n                                        </article>\n                                    </div>\n                                );\n                            })\n                        }\n                        </div>\n                    </div>\n                </div>\n                {\n                    this.state.isShowAddBoard && (\n                        <div className=\"modal is-active\">\n                            <div className=\"modal-background\"></div>\n                            <div className=\"modal-content\">\n                                <div className=\"box\">\n                                    <div className=\"field\">\n                                        <label className=\"label\">Title:</label>\n                                        <div className=\"control\">\n                                            <input type=\"text\" className=\"input\" name=\"title\" value={this.state.board.title} onChange={this.handleChange}/>\n                                        </div>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">States</label>\n                                        <div className=\"control\">\n                                            <div className=\"select\">\n                                                <select name=\"stateInd\" onChange={this.handleChange} value={this.state.board.stateInd}>\n                                                    <option value=\"0\">Smile - Frown - Improve</option>\n                                                    <option value=\"1\">GOOD - BAD - DISCONTINUE</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"field is-grouped\">\n                                        <div className=\"control\">\n                                            <button className=\"button is-primary\" onClick={this.addNewBoard}>Add</button>\n                                        </div>\n                                        <div className=\"control\">\n                                            <button className=\"button\" onClick={()=>this.setState({isShowAddBoard: false})}>Cancel</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <button className=\"modal-close is-large\" aria-label=\"close\" onClick={()=>this.setState({isShowAddBoard: false})}></button>\n                        </div>\n                    )\n                        \n                        \n                }\n            </section>\n        );\n    }\n    \n}\n\nexport default BoardOverview;","import v4 from 'uuid/v4'\n\nclass IssueEntity {\n    constructor(){\n        this.id = v4();\n        this.dbId = null;\n        this.text = \"\";\n        this.state = \"\";\n        this.boardId = \"\";\n    }\n}\n\n\nexport default IssueEntity;\n","import React, { Component } from 'react';\nimport IssueEntity from '../entities/Issue.js';\n\nclass Issue extends Component {\n    \n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            mode: 'READ'\n        };\n        \n        this.handleChange = this.handleChange.bind(this);\n        this.deleteEntry = this.deleteEntry.bind(this);\n        this.onFocusOut = this.onFocusOut.bind(this);\n        \n    }\n    \n    deleteEntry() {\n        const id = this.props.name;\n        this.props.onDelete(id);\n    }\n    \n    onFocusOut() {\n        \n        const id = this.props.name;\n        this.props.onFocusOut(id);\n    }\n    \n    \n    \n    handleChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        var issueValue = this.props.issue.text;\n        var stateValue = this.props.issue.state;\n        \n        if (target.name === \"text\") {\n            issueValue = value;\n        } else if (target.name === \"state\") {\n            stateValue = value;\n        }\n        \n        var issue = new IssueEntity();\n        issue.id = this.props.name;\n        issue.state = stateValue;\n        issue.text = issueValue;\n        issue.boardId = this.props.issue.boardId;\n        issue.dbId = this.props.issue.dbId;\n        \n        var e = {\n            target : {\n                type : \"issue\",\n                value: issue,\n                name: this.props.name\n            }\n        };\n        \n        this.props.onChange(e);\n        \n        if (target.type === \"select-one\") {\n            this.onFocusOut(); // weird i know. But whenever the value in the select box has changed, will trigger an focus out\n        }\n    }\n    \n    onMouseOver = () => {\n        this.setState({mode:'EDIT'});\n    }\n    \n    onMouseLeave = () => {\n        this.setState({mode:'READ'});\n    }\n    \n    render() {\n        return (\n            <div id={\"issue-\"+this.props.issue.id} className=\"box draggable\" draggable>\n                \n                <div className=\"field\">\n                    <div className=\"control\">\n                        {\n                            this.state.mode === 'READ' && (\n                                <p onMouseOver={this.onMouseOver}>{this.props.issue.text}</p>\n                                )\n                        }\n                        {\n                            this.state.mode === 'EDIT' && (\n                                <textarea className=\"textarea has-fixed-size\" name=\"text\" value={this.props.issue.text} onChange={this.handleChange} onBlur={this.onFocusOut} onMouseLeave={this.onMouseLeave}/>\n                                )\n                        }\n                    </div>\n                </div>\n                <div className=\"field is-grouped\">\n                    <div className=\"control\">\n                    {\n                            this.state.mode === 'READ' && (\n                                <p onMouseOver={this.onMouseOver}>{this.props.issue.state}</p>\n                                )\n                    }\n                    {\n                        this.state.mode === 'EDIT' && (\n                            <div className=\"select\">\n                                <select name=\"state\" onChange={this.handleChange} value={this.props.issue.state} onBlur={this.onFocusOut} onMouseLeave={this.onMouseLeave}>\n                                    {\n                                        this.props.states.map((state, ind) => {\n                                            return (\n                                                    <option key={ind} value={state}>{state}</option>\n                                                );\n                                        })\n                                    }\n                                </select>\n                            </div>\n                        )\n                    }\n                    </div>\n                    <div className=\"control\">\n                        <button className=\"button is-light\" onClick={this.deleteEntry}>\n                            <span className=\"icon\">\n                              <i className=\"fas fa-trash\"></i>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    \n}\n\nexport default Issue;","export const ActionTypes = {\n    LOAD_ISSUES: 'LOAD_ISSUES',\n    SAVE_ISSUE: 'SAVE_ISSUE'\n}\n\nexport const EventTypes = {\n    LOAD_ISSUES_COMPLETED: 'LOAD_ISSUES_COMPLETED',\n    SAVE_ISSUE_COMPLETED: 'SAVE_ISSUE_COMPLETED'\n}\n\nexport default ActionTypes;","import IssueActionTypes from './IssueActionTypes';\nimport dispatcher from '../Dispatcher';\n\nconst Actions = {\n    loadIssues(boardId) {\n        dispatcher.dispatch({\n            type: IssueActionTypes.LOAD_ISSUES,\n            boardId\n        });\n    },\n    saveIssue(issue) {\n        dispatcher.dispatch({\n            type: IssueActionTypes.SAVE_ISSUE,\n            issue\n        })\n    }\n}\n\nexport default Actions;","import {EventEmitter} from 'events';\nimport {ActionTypes, EventTypes}  from './IssueActionTypes';\nimport dispatcher from '../Dispatcher';\nimport axios from 'axios';\n\nclass IssueStore extends EventEmitter{\n    constructor(props) {\n        super(props);\n        this.issues = [];\n    }\n\n    getIssues() {\n        return this.issues;\n    }\n    \n    loadIssues(boardId) {\n        \n        axios.get('/api/issues',    {\n                                        params: {\n                                            boardId : boardId\n                                        }\n                                    })\n            .then((res) => {\n                this.issues = res.data;\n                this.emit(EventTypes.LOAD_ISSUES_COMPLETED);\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n        \n        \n    }\n    \n    saveIssue(issue) {\n        if (issue.dbId) {\n            axios.post('/api/issues/'+issue.dbId, issue)\n                .then((res) => {\n                    this.loadIssues(issue.boardId);\n                    this.emit(EventEmitter.SAVE_ISSUE_COMPLETED);\n                })\n                .catch((err) => {\n                    console.log(err);\n                });\n        } else {\n            axios.post('/api/issues', issue )\n                .then((res) => {\n                    this.loadIssues(issue.boardId);\n                    this.emit(EventEmitter.SAVE_ISSUE_COMPLETED);\n                })\n                .catch((err) => {\n                    console.log(err);\n                });\n        }\n    }\n\n\n    handleActions(action) {\n        switch(action.type) {\n            case ActionTypes.LOAD_ISSUES:\n                if (!action.boardId) {\n                    this.emit(EventTypes.LOAD_ISSUES_COMPLETED);\n                    break;\n                }\n                this.loadIssues(action.boardId);\n                break;\n            case ActionTypes.SAVE_ISSUE:\n                if(!action.issue) {\n                    this.emit(EventEmitter.SAVE_ISSUE_COMPLETED);\n                    break;\n                }\n                this.saveIssue(action.issue);\n                break;\n            default:\n                return;\n        }\n    }\n}\n\nconst issueStore = new IssueStore();\ndispatcher.register( issueStore.handleActions.bind(issueStore));\n\nexport default issueStore;","import React, { Component } from 'react';\nimport Issue from '../components/Issue.jsx';\nimport IssueEntity from '../entities/Issue.js';\n\nimport IssueActions from '../actions/IssueActions';\nimport IssueStore from '../actions/IssueStore';\nimport { EventTypes as IssueEventTypes } from '../actions/IssueActionTypes';\n\nimport BoardActions from '../actions/BoardActions';\nimport BoardStore from '../actions/BoardStore';\nimport { EventTypes as BoardEventTypes } from '../actions/BoardActionTypes';\n\nclass Board extends Component {\n    \n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            board : {\n            },\n            issues : [\n            ]\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.addIssue = this.addIssue.bind(this);\n        this.deleteEntry = this.deleteEntry.bind(this);\n        this.setBoard = this.setBoard.bind(this);\n        this.setIssues = this.setIssues.bind(this);\n        this.saveEntry = this.saveEntry.bind(this);\n    }\n    \n    componentWillMount() {\n        BoardStore.on(BoardEventTypes.LOAD_BOARD_COMPLETED, this.setBoard);\n        IssueStore.on(IssueEventTypes.LOAD_ISSUES_COMPLETED, this.setIssues);\n    }\n\n    componentWillUnmount() {\n        BoardStore.removeListener(BoardEventTypes.LOAD_BOARD_COMPLETED, this.setBoard);\n        IssueStore.removeListener(IssueEventTypes.LOAD_ISSUES_COMPLETED, this.setIssues);\n    }\n\n    componentDidMount() {\n        const boardId = this.props.match.params.id;\n        BoardActions.loadBoard(boardId);\n        IssueActions.loadIssues(boardId);\n    }\n    \n    setBoard() {\n        this.setState({board: BoardStore.getBoard()});\n    }\n    \n    setIssues() {\n        this.setState({issues: IssueStore.getIssues()});\n    }\n    \n    saveEntry(id) {\n        var issues = this.state.issues;\n        \n        const issue = issues.find((issue) => {\n            return issue.id === id;\n        });\n        \n        IssueActions.saveIssue(issue);\n    }\n    \n    deleteEntry(id) {\n        var issues = this.state.issues;\n        \n        const ind = issues.findIndex((issue) => {\n            return issue.id === id;\n        });\n        \n        if (ind >= 0) {\n            issues.splice(ind, 1);\n            this.setState({issues: issues});\n        }\n        \n    }\n    \n    addIssue(e) {\n        const state = e.target.name;\n        var issues = this.state.issues;\n        var issue = new IssueEntity();\n        issue.boardId = this.state.board.id;\n        issue.state = state;\n        \n        issues.push(issue);\n        this.setState({issues:issues});\n    }\n    \n    handleChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        if (target.type === 'issue') {\n            var issues = this.state.issues;\n            const ind = issues.findIndex((issue) => {\n                return issue.id === name\n            });\n            if (ind >= 0) {\n                issues[ind] = value;\n                \n                this.setState({issues : issues});\n            }\n        }\n    }\n    \n    render() {\n        if (this.state.board) {\n            return (\n                <section id=\"board\" className=\"section\">\n                    <div className=\"container\">\n                    <h1 className=\"title\">{`Board - ${this.state.board.title}`}</h1>\n                        <div className=\"columns\">\n                            {\n                                this.state.board.states && this.state.board.states.map((state, ind) => {\n                                    var issues = this.state.issues.filter((issue) => {\n                                        return (issue.state === state);\n                                    })\n                                    return (\n                                        <div key={state} className=\"column\">\n                                            <div className=\"has-background-light\">\n                                            <div className=\"level\">\n                                                <div className=\"level-left\">\n                                                    <div className=\"level-item\">\n                                                        <p className=\"heading\">{state}</p> \n                                                    </div>\n                                                </div>\n                                                <div className=\"level-right\">\n                                                    <div className=\"level-item\">\n                                                        <button name={state} className=\"button is-primary is-small\" onClick={this.addIssue}>Add</button>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                                    \n                                            <div className=\"section\">\n                                                <div className=\"content\">\n                                            {\n                                                issues.map((issue, ind) => {\n                                                    return (<Issue issue={issue} states={this.state.board.states} key={ind} name={issue.id} onChange={this.handleChange} onDelete={this.deleteEntry} onFocusOut={this.saveEntry}/>)\n                                                })\n                                            }\n                                                </div>\n                                            </div>\n                                            </div>\n                                        </div>)\n                                })\n                            }\n                        </div>\n                    </div>\n                </section>\n            )\n        }\n         else {\n            return (\n                <section className=\"section\">\n                    <h1 className=\"Title\">Nothing found here</h1>\n                </section>)\n        }\n    }\n   \n}\n\nexport default Board;","import React, { Component } from 'react';\nimport 'bulma/css/bulma.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\nimport { BrowserRouter, Switch, Route} from 'react-router-dom';\n\nimport BoardOverview from './pages/BoardOverview.jsx';\nimport Board from './pages/Board.jsx';\n\nclass App extends Component {\n  render() {\n    return (\n      \n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={BoardOverview}/>\n          <Route path='/board/:id' component={Board}/>\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}